// Generated by CoffeeScript 1.10.0
(function() {
  var AccessType, CSim, SimManager, height, nameMap, root, width;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.AccessType = AccessType = Object.freeze({
    hit: 1,
    miss: 2,
    evict: 3
  });

  nameMap = {
    1: 'Hit',
    2: 'Miss',
    3: 'Evict'
  };

  height = 50;

  width = 50;

  root.CSim = CSim = (function() {
    function CSim(s1, E, res, options) {
      var _, accType, address, block, controlDiv, i, inner, j, k, l, len, line, newState, ref, ref1, ref2, ref3, row, s, set, state, tag;
      this.s = s1;
      this.E = E;
      options = options != null ? options : {};
      this.parent = (ref = options['parent']) != null ? ref : $('body');
      this.log = options['log'];
      this.summary = options['summary'];
      this.numSets = 1 << this.s;
      this.currentIndex = 0;
      this.cache = [];
      this.out = [];
      this.states = [];
      this.missRati;
      this.intervalID = null;
      this.home = $("<div/>").appendTo(this.parent);
      if (this.summary != null) {
        this.summary.html("Summary <br/> Hits: " + res['hits'] + " <br/> Misses: " + res['misses'] + " <br/> Miss Ratio: " + res['miss_rate']);
      }
      controlDiv = $("<div class='row'/>").appendTo(this.home);
      $("<div class='col-md-4'/>").appendTo(controlDiv).append($("<button class='btn' id='autobtn'/>").attr("role", "start").text("Auto").click((function(_this) {
        return function() {
          var autoFunc;
          if ($("#autobtn").attr('role') === 'start') {
            autoFunc = function() {
              return _this.intervalID = setInterval(function() {
                _this.next();
                if (!_this.hasNext()) {
                  return clearInterval(_this.intervalID);
                }
              }, 1000);
            };
            autoFunc();
            return $("#autobtn").text("Stop").attr("role", 'stop');
          } else {
            clearInterval(_this.intervalID);
            return $("#autobtn").text("Auto").attr("role", 'start');
          }
        };
      })(this)));
      $("<div class='col-md-4'/>").appendTo(controlDiv).append($("<button class='btn'/>").text("Next").click((function(_this) {
        return function() {
          return _this.next();
        };
      })(this)));
      $("<div class='col-md-4'/>").appendTo(controlDiv).append($("<button class='btn'/>").text("Prev").click((function(_this) {
        return function() {
          return _this.prev();
        };
      })(this)));
      state = [];
      for (i = j = 0, ref1 = this.numSets; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {
        row = $("<div class='row'/>").appendTo(this.home);
        $("<p class='col-md-2' style='margin-top: 15px;'> Set " + i + "</p>").appendTo(row);
        inner = $("<div class='row col-md-10'/>").appendTo(row);
        for (_ = k = 0, ref2 = this.E; 0 <= ref2 ? k < ref2 : k > ref2; _ = 0 <= ref2 ? ++k : --k) {
          block = $("<p class='block'/>").text('-1').appendTo($("<div class='col-md-3'/>").appendTo(inner));
          this.cache.push(block);
          state.push({
            tag: -1,
            type: 0
          });
        }
      }
      this.states.push(state);
      this.out.push("");
      ref3 = res['trace'];
      for (l = 0, len = ref3.length; l < len; l++) {
        line = ref3[l];
        block = line['block'];
        tag = line['tag'];
        accType = line['acc_type'];
        address = line['address'];
        set = line['set'];
        if (this.log != null) {
          this.out.push("Address: 0x" + (address.toString(16)) + "  Tag: 0x" + (tag.toString(16)) + "  Set: " + set + "  " + nameMap[accType]);
        }
        newState = (function() {
          var len1, m, ref4, results;
          ref4 = this.states[this.states.length - 1];
          results = [];
          for (m = 0, len1 = ref4.length; m < len1; m++) {
            s = ref4[m];
            results.push(s);
          }
          return results;
        }).call(this);
        newState[block] = {
          tag: tag,
          type: accType
        };
        this.states.push(newState);
      }
    }

    CSim.prototype.print = function() {
      var b, i, j, len, ref;
      if (this.log != null) {
        this.log.html("<br>" + (this.out.slice(0, +this.currentIndex + 1 || 9e9).reverse().join("<br><br>")));
      }
      ref = this.states[this.currentIndex];
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        b = ref[i];
        this.cache[i].removeClass("hit miss evict");
        this.cache[i].text(b.tag !== -1 ? "0x" + (b.tag.toString(16)) : b.tag);
        switch (b.type) {
          case 0:
            break;
          case AccessType.hit:
            this.cache[i].addClass("hit");
            break;
          case AccessType.miss:
            this.cache[i].addClass("miss");
            break;
          case AccessType.evict:
            this.cache[i].addClass("evict");
            break;
          default:
            console.log("Unsupported Type: " + b.type);
        }
      }
      return true;
    };

    CSim.prototype.next = function() {
      if (this.hasNext()) {
        ++this.currentIndex;
        this.print();
        return true;
      } else {
        return false;
      }
    };

    CSim.prototype.prev = function() {
      if (this.hasPrev()) {
        --this.currentIndex;
        this.print();
        return true;
      } else {
        return false;
      }
    };

    CSim.prototype.hasNext = function() {
      return this.currentIndex + 1 < this.states.length;
    };

    CSim.prototype.hasPrev = function() {
      return this.currentIndex >= 0;
    };

    CSim.prototype.destroy = function() {
      this.home.remove();
      if (this.log != null) {
        this.log.text("");
      }
      return clearInterval(this.intervalID);
    };

    return CSim;

  })();

  root.SimManager = SimManager = (function() {
    function SimManager(home) {
      var inputDiv, nameDiv;
      this.home = home;
      nameDiv = $("<div class='row'/>").appendTo(this.home);
      $("<div class='col-md-3'/>").text("Set bits").appendTo(nameDiv);
      $("<div class='col-md-3'/>").text("Block bits").appendTo(nameDiv);
      $("<div class='col-md-3'/>").text("Associativity").appendTo(nameDiv);
      $("<div class='col-md-3'/>").text("Memory Size").appendTo(nameDiv);
      inputDiv = $("<div class='row'/>").appendTo(this.home);
      $("<div class='col-md-3'/>").appendTo(nameDiv).append($("<input type='text' id='s'/>").attr("value", "3").attr("style", "width: 100%;"));
      $("<div class='col-md-3'/>").appendTo(nameDiv).append($("<input type='text' id='b'/>").attr("value", "3").attr("style", "width: 100%;"));
      $("<div class='col-md-3'/>").appendTo(nameDiv).append($("<input type='text' id='E'/>").attr("value", "3").attr("style", "width: 100%;"));
      $("<div class='col-md-3'/>").appendTo(nameDiv).append($("<input type='text' id='memSize'/>").attr("value", "64").attr("style", "width: 100%;"));
    }

    SimManager.prototype.getParams = function() {
      return {
        s: parseInt($("#s").val()),
        b: parseInt($("#b").val()),
        E: parseInt($("#E").val()),
        memSize: parseInt($("#memSize").val())
      };
    };

    return SimManager;

  })();

}).call(this);
